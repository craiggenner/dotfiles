#!/usr/bin/env bash

set -euo pipefail

# set default profile
profile="default"
assume_role=""
assume_duration=43200

while getopts ":hp:t:a:d:" opt; do
        case $opt in
                p)
                        profile=$OPTARG
                        ;;
                t)
                        token_code=$OPTARG
                        ;;
                a)
                        assume_role=$OPTARG
                        ;;
                d)
                        assume_duration=$OPTARG
                        ;;
                h)
                        echo "Usage: -p [PROFILE] -t [MFA_CODE]"
                        exit 1
                        ;;
                \? )
                        echo "Invalid option: $OPTARG" 1>&2
                        exit 1
                        ;;
                : )
                        echo "Invalid option: -$OPTARG requires an argument" 1>&2
                        exit 1
                        ;;
        esac
done

if [ "${token_code}" == "" ] && [ -t 0 ]; then
        echo -n "Enter MFA code for ${profile} profile: "
        read token_code
fi

if [ "${token_code}" != "" ]; then
        if $(echo $token_code | grep -v '^[0-9]\{6\}$' > /dev/null); then
                echo "Invalid MFA code: ${token_code}"
                exit 1
        fi
else
        echo "Error: Missing MFA code"
        exit 1
fi

if [ "${profile}" = "" ]; then
        echo "Error: Missing profile"
        exit 1
fi

token_code="--token-code ${token_code}"
user_name=$(aws iam get-user --profile ${profile} | jq -re '.User.UserName')
serial_number="--serial-number $(aws iam list-mfa-devices --profile ${profile} --user-name ${user_name} | jq -re '.MFADevices[].SerialNumber | select(contains("mfa"))')"

#if [[ "${assume_role:-}" == "" && "${assume_duration:-}" != "43200" ]]; then
#  assume_duration=900
#fi

# NOTE: The keys should not be exported as AWS_ACCESS_KEY_ID
# or AWS_SECRET_ACCESS_KEY_ID. This will not work. They
# should be exported as other names which can be used below. This prevents
# them from incorrectly being picked up from libraries or commands.
temporary_credentials="$(aws \
        sts \
        get-session-token \
        --profile "${profile}" \
        --duration-seconds ${assume_duration} \
        ${serial_number} \
        ${token_code}
)"

unset AWS_PROFILE

if [ "${temporary_credentials}" != "" ]; then
  ACCESS_KEY_ID=$(echo "${temporary_credentials}" | jq -re '.Credentials.AccessKeyId')
  SECRET_ACCESS_KEY=$(echo "${temporary_credentials}" | jq -re '.Credentials.SecretAccessKey')
  SESSION_TOKEN=$(echo "${temporary_credentials}" | jq -re '.Credentials.SessionToken')

  if [ "${assume_role}" != "" ]; then
    temporary_credentials="$(\
      AWS_ACCESS_KEY_ID=${ACCESS_KEY_ID} \
      AWS_SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY} \
      AWS_SESSION_TOKEN=${SESSION_TOKEN} \
      aws \
      sts \
      assume-role \
      --role-arn "${assume_role}" \
      --role-session-name aws_mfa_assume_role
    )"
    ACCESS_KEY_ID=$(echo "${temporary_credentials}" | jq -re '.Credentials.AccessKeyId')
    SECRET_ACCESS_KEY=$(echo "${temporary_credentials}" | jq -re '.Credentials.SecretAccessKey')
    SESSION_TOKEN=$(echo "${temporary_credentials}" | jq -re '.Credentials.SessionToken')
  fi
#   # Replace [mfa] section in .aws/credentials
#    sed '/\[mfa\]/,/aws_session_token/d' -i ~/.aws/credentials
#    echo "[mfa]" >> ~/.aws/credentials
#    echo "aws_access_key_id = $(echo "${temporary_credentials}" | jq -re '.Credentials.AccessKeyId')" >> ~/.aws/credentials
#    echo "aws_secret_access_key = $(echo "${temporary_credentials}" | jq -re '.Credentials.SecretAccessKey')" >> ~/.aws/credentials
#    echo "aws_session_token = $(echo "${temporary_credentials}" | jq -re '.Credentials.SessionToken')" >> ~/.aws/credentials
  echo "export AWS_ACCESS_KEY_ID=${ACCESS_KEY_ID}"
  echo "export AWS_SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}"
  echo "export AWS_SESSION_TOKEN=${SESSION_TOKEN}"
else
        echo -e "\nDid you try and reuse an MFA code?"
fi
